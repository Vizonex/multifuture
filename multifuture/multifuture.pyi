
# This type stub file was generated by cyright and modified by the author
from asyncio import Future
from typing import Any, Generic, TypeVar, Union, Callable, Optional
from types import GenericAlias

class CancelledError(Exception):
    ...

class InvalidStateError(Exception):
    ...

_T = TypeVar("_T")

class MultiFuture(Generic[_T]):
    """A Multi-Purpose Future Object for communication between a synchronous parent
    to different asynchronous children that could be in different threads or eventloops"""
    __class_getitem__ = classmethod(GenericAlias)
    
    def __init__(self, exception_handler: Optional[Callable[[Exception], None]]  = None) -> None:
        ...
    
    def cancelled(self) -> bool:
        ...
    
    def done(self) -> bool:
        ...
    
    def cancel(self) -> bool:
        ...
    
    def set_result(self, result: _T) -> None:
        ...
    
    def set_exception(self, exception: Exception) -> None:
        ...
    
    def result(self, timeout: Union[int, float] = -1) -> _T:
        """
        obtains the result from the MultiFuture
        if your tying to behave asynchronous you should await with a child object
        but remeber that awaiting requires a running eventloop

        Args:
            :param timeout: a float or integer in seconds to wait for the result in
                -1 assumes to wait forever until obtained.
        
        Returns:
            result object if there was no exception or cancellation
        
        Raises:
            Any Exception passed to the Object Or CancelledError
        """
        ...
    
    def exception(self) -> object:
        """Returns with a given exception if any are obtained"""
        ...
    
    def add_done_callback(self, fn: object) -> object:
        ...
    
    def remove_done_callback(self, fn: object) -> int:
        ...
    
    def create_future(self) -> Future[_T]:
        """Creates a new asyncio.Future via calling the running 
        thread's eventloop, if none are running this will raise 
        an Exception"""
        ...
    
    def add_future(self, fut: object) -> int:
        """Adds a preexisting future to the MultiFuture, Raises TypeError if 
        future does not inherit from `_asyncio.Future` don't let the `asyncio.Future` 
        pure python version fool you."""
        ...
    
    


